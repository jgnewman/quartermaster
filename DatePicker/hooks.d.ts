import { ChangeEvent, Dispatch, RefObject, SetStateAction } from "react";
import type { DatePickerChangeHandler, DateRange, TimeMap, ValidValue, ValidValueRange } from "./types";
export declare function useInvalidDateError(disablePast: boolean | undefined, endDate: Date | null, now: Date, startDate: Date | null): void;
export declare function useDateRangeFromValue(disablePast: boolean | undefined, enableRange: boolean | undefined, enableTimes: boolean | undefined, now: Date, timeIncrement: number, value: ValidValue | ValidValueRange): DateRange;
export declare function useClickPicker(confirmRef: RefObject<HTMLButtonElement>, isDisabled: boolean | undefined, setOpen: Dispatch<SetStateAction<boolean>>): (evt: any) => void;
export declare function useFocusInput(setOpen: Dispatch<SetStateAction<boolean>>): () => void;
export declare function useCloseOnClickAway(contentRef: RefObject<HTMLDivElement>, isOpen: boolean, selectorsRef: RefObject<HTMLDivElement>, setOpen: Dispatch<SetStateAction<boolean>>): void;
export declare function useClearValue(changeHandler: DatePickerChangeHandler | undefined, enableRange: boolean | undefined): () => void;
export declare function useConfirmValue(setOpen: Dispatch<SetStateAction<boolean>>): () => void;
export declare function useFieldValue(enableRange: boolean | undefined, enableTimes: boolean | undefined, endDate: Date | null, startDate: Date | null): string;
export declare function useCalendarData(disablePast: boolean | undefined, referenceMonth: number, referenceYear: number, weekStartsOnMonday?: boolean): import("./types").Day[][];
export declare function useDayTitle(date: Date): string;
export declare function useMemoizedSameDay(a: Date | null, b: Date | null): boolean;
export declare function useValueSetter(changeHandler: DatePickerChangeHandler | undefined, date: Date, enableRange: boolean | undefined, endDate: Date | null, isEndDate: boolean | undefined, isSelected: boolean | undefined, isStartDate: boolean | undefined, startDate: Date | null): () => void;
export declare function useRefreshView(now: Date, setCurrentView: Dispatch<SetStateAction<Date>>): () => void;
export declare function useDecrementMonth(currentView: Date, setCurrentView: Dispatch<SetStateAction<Date>>): () => void;
export declare function useIncrementMonth(currentView: Date, setCurrentView: Dispatch<SetStateAction<Date>>): () => void;
export declare function useCalendarMonthName(currentView: Date): string;
export declare function useEnableLeftButton(currentView: Date, disablePast: boolean | undefined, now: Date): boolean;
export declare function useSliderIds(enableRange: boolean | undefined): string[];
export declare function useSliderLabels(enableRange: boolean | undefined, endDate: Date | null, startDate: Date | null): string[];
export declare function useTimeMappings(disablePast: boolean | undefined, enableRange: boolean | undefined, endDate: Date | null, now: Date, startDate: Date | null, timeIncrement: number): [TimeMap, TimeMap];
export declare function useSliderValues(date: Date | null, timesMap: TimeMap): [number, number, number];
export declare function useValueFormatter(timeMap: TimeMap): (slideValue: number) => string;
export declare function useStartTimeSetter(changeHandler: DatePickerChangeHandler | undefined, enableRange: boolean | undefined, endDate: Date | null, startDate: Date | null, startTimesMap: TimeMap): (evt: ChangeEvent<HTMLInputElement>) => void;
export declare function useEndTimeSetter(changeHandler: DatePickerChangeHandler | undefined, endDate: Date | null, endTimesMap: TimeMap, startDate: Date | null): (evt: ChangeEvent<HTMLInputElement>) => void;
export declare function useCloseOnBlurContainer(containerRef: RefObject<HTMLDivElement>, isOpen: boolean, setOpen: Dispatch<SetStateAction<boolean>>): void;
